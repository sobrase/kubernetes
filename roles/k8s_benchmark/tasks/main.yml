- name: tag nodes for elasticsearch deployment
  command: |
     bash -c 'for i in $(nodeset -e {{ item.value }}); do kubectl label nodes --overwrite ${i}.{{dnsDomain}} topology.kubernetes.io/zone={{ item.key }} && kubectl label nodes --overwrite ${i}.{{dnsDomain}} node-role.kubernetes.io/worker=elastic_worker ; done'
  loop: "{{ query('dict',benchmark.elastic.racks) }}"
  register: cmdvalue

- name: "output debug"
  debug:
    msg: "{{ item.stdout_lines }}"
  with_items: "{{cmdvalue.results}}"
  loop_control:
    label: "{{item.item.key}}"

# - name: tag elastic bd  
#   command: |
#     bash -c "for i in $(kubectl get bd -n {{openebs.namespace}} -o wide | grep -E -i {{benchmark.elastic.disks}} | grep -i worker | awk '{print $1}'); do kubectl label bd -n {{openebs.namespace}} ${i} openebs.io/block-device-tag=elasticsearch done"
#   register: cmdvalue


# - name: "block device tagging info"
#   debug:
#     msg: "{{ cmdvalue.stdout_lines }}"

- name: "prepare cluster for elasticsearch"
  ansible.posix.sysctl:
    name: vm.max_map_count
    value: '262144'
    reload: true
    sysctl_set: true
  delegate_to: "{{item}}"
  loop: "{{ groups['all'] }}"
  become: true

- name: "create benchmark home directory"
  file:
    path: ".kube/benchmark"
    state: directory

- name: "create .kube/elasticsearch directory"
  file:
    path: ".kube/elasticsearch/"
    state: directory

- name: Copy eck-operator helm chart (takes some time)
  ansible.posix.synchronize:
    src: eck-operator_chart
    dest: "{{ansible_env.HOME}}/.kube/elasticsearch/"

- name: Generate values template file for eck-operator
  template: 
    src: "eck-operator_values.yaml.j2"
    dest: .kube/elasticsearch/eck-operator_chart/values.yaml

- name: Deploy eck operator chart 
  kubernetes.core.helm: 
    name: eck-operator
    kubeconfig: .kube/config
    chart_ref: .kube/elasticsearch/eck-operator_chart
    release_namespace: "{{ benchmark.elastic.namespace }}"
    create_namespace: true
    atomic: true # delete l'install si ca fail
    wait: true # attends la fin de l'installation avant de passer Ã  la tache suivante
  become: true

- name: "install elastic benchmark cluster"
  template:
    src: elastic_benchmark.yml.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or an absolute path. The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template.
    dest:  .kube/benchmark/elastic_benchmark.yml # required. Location to render the template to on the remote machine.
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

# - name: "apply elastic benchmark manifest"
#   command: bash -c 'kubectl apply -f .kube/benchmark/elastic_benchmark.yml'
#   register: cmdvalue

# - name: "result of setting elastic deployment"
#   debug:
#     msg: "{{ cmdvalue.stdout_lines }}"

# - name: "create benchmark root directory"
#   file:
#     path: "/benchmark/benchmark_results"
#     state: directory
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#   become: true
#   delegate_to: "{{ item }}"
#   loop: "{{ groups['workers'] }}"

# - name: Copy rally track data
#   copy:
#     src: rally-track-data-{{benchmark.esrally.tracks}}.tar
#     dest: /benchmark
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"    
#   delegate_to: "{{ item }}"
#   become: true
#   loop: "{{ groups['workers'] }}"

# - name: "template rally pod"
#   template:
#     src: rally.yml.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or an absolute path. The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output template.
#     dest:  .kube/benchmark/rally.yml # required. Location to render the template to on the remote machine.
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"

# - name: "apply rally benchmark manifest"
#   command: bash -c 'kubectl apply -f .kube/benchmark/rally.yml'
#   register: cmdvalue

# faire aussi sysctl -w vm.XXXX=XX

# - name: copy esrally tracks
#   copy:
#     dest:  /benchmark/ # required. Remote absolute path where the file should be copied to. If C(src) is a directory, this must be a directory too. If C(dest) is a non-existent path and if either C(dest) ends with "/" or C(src) is a directory, C(dest) is created. If I(dest) is a relative path, the starting directory is determined by the remote host. If C(src) and C(dest) are files, the parent directory of C(dest) is not created and the task fails if it does not already exist.
#     src:  rally-track-data-{{benchmark.esrally.track}} # not required. Local path to a file to copy to the remote server. This can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to the C(rsync) command line tool.
#     mode: 444 # not required. The permissions of the destination file or directory. For those used to C(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777))or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.3, the mode may also be the special string C(preserve). C(preserve) means that the file will be given the same permissions as the source file.
#     directory_mode:  # not required. When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.

# - name: generate rally file






#  pour label les zones pour elasticsearch 
#  kubectl label nodes worker3.devtgl.dev.lan topology.kubernetes.io/zone="R2"

#  kubectl label nodes worker3.devtgl.dev.lan node-role.kubernetes.io/worker="elastic_worker"

#  il faut aussi faire sysctl -w vm.max_map_count=262144 de maniere temporaire ou le mettre dans Sinon on modifier le fichier /etc/sysctl.conf  